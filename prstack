#! /usr/bin/env bash
set -euo pipefail

prstack_home=~/.prstack

function rebase_all() { ( set -euo pipefail
  local stack_name="${1}"
  stack=$(show "${stack_name}")

  num_branches=$(jq 'length' <<< "${stack}")
  for i in $(seq 0 $((num_branches-1))); do
    item=$(jq ".[$i]" <<< "${stack}")
    branch=$(jq -re '.branch' <<< "${item}")

    if [[ "${i}" == 0 ]]; then
      upstream="master"
    else
      upstream=$(jq -re ".[$((i-1))].branch" <<< "${stack}")
    fi

    git checkout "${branch}"
    git fetch origin "${upstream}"
    git rebase
    /Users/seangatewood/scripts/aliasscripts/sendit.sh
  done
)}


function open_pr() {
  local ref="${1}"
  [ -z "${ref}" ] && ref=$(git branch --show-current)
  gh pr view "${ref}" --web
}

function submit_pr() {
  local ref="${1}"
  [ -z "${ref}" ] && ref=$(git branch --show-current)
  echo "are you extra sure?"
  exit 1
#  gh pr ready "${ref}"
}

function open_prs_in_browser() { ( set -euo pipefail
  local stack_name="${1}"
  stack=$(show "${stack_name}")

  num_branches=$(jq 'length' <<< "${stack}")
  for i in $(seq 0 $((num_branches-1))); do
    item=$(jq ".[$i]" <<< "${stack}")
    branch=$(jq -re '.branch' <<< "${item}")
    open_pr "${branch}"
  done
)}

function submit_all_prs() { ( set -euo pipefail
  local stack_name="${1}"
  stack=$(show "${stack_name}")

  num_branches=$(jq 'length' <<< "${stack}")
  for i in $(seq 0 $((num_branches-1))); do
    item=$(jq ".[$i]" <<< "${stack}")
    branch=$(jq -re '.branch' <<< "${item}")
    submit_pr "${branch}"
  done
)}

function get_commit_yaml() { ( set -euo pipefail
  local stack_name="${1}"

  function get_branch_name() { ( set -euo pipefail
    local num="${1}"
    local subject="${2}"
    echo "prstack-${stack_name}-${num}"
  )}

  num=1
  while IFS= read -r sha || [ -n "${sha}" ]; do
    subject=$(git log --format='%s' -n 1 "${sha}")
    branch=$(get_branch_name "${num}" "${subject}")
    echo "- title: ${num}) ${subject}"
    echo "  branch: ${branch}"
    echo "  initialSha: ${sha}"
    ((num++))
  done
)}
  
function generate() { ( set -euo pipefail
  local stack_name="${1}"

  stack_folder="${prstack_home}/${stack_name}"
  mkdir -p "${stack_folder}"

  stack_file="${stack_folder}/stack.jsonnet"
  git log --reverse '@{upstream}..HEAD' --pretty=format:"%H" | get_commit_yaml "${stack_name}" | yq eval -o json | jq '.[]' --slurp | jsonnetfmt - > "${stack_file}"
  cat "${stack_file}"
  echo "Created ${stack_file}"
)}

function ensure_branches() { ( set -euo pipefail
  local stack="${1}"

  num_branches=$(jq 'length' <<< "${stack}")
  for i in $(seq 0 $((num_branches-1))); do
    item=$(jq ".[$i]" <<< "${stack}")
    branch=$(jq -re '.branch' <<< "${item}")
    title=$(jq -re '.title' <<< "${item}")

    echo "ensure branch: ${branch}"

    # if branch doesn't exist locally, create it from the initialSha
    if ! git rev-parse --verify "${branch}" &>/dev/null; then
      initial_sha=$(jq -re '.initialSha' <<< "${item}")
      git branch "${branch}" "${initial_sha}"
    fi

    # set upstream branch
    if [[ "${i}" == 0 ]]; then
      upstream="master"
    else
      upstream=$(jq -re ".[$((i-1))].branch" <<< "${stack}")
    fi
    git branch -u "origin/${upstream}" "${branch}"

    # push branch if it's only local
    if ! git rev-parse --verify "origin/${branch}" &>/dev/null; then
      git push origin "${branch}"
    fi

    function get_prev_url() { ( set -euo pipefail
      if [[ "${i}" == 0 ]]; then
        return 1
      fi
      prev=$(jq -re ".[$((i-1))].branch" <<< "${stack}")
      gh pr view "${prev}" --json url | jq -re '.url'
    )}

    function get_next_url() { ( set -euo pipefail
      if [[ "${i}" == $((num_branches-1)) ]]; then
        return 1
      fi
      next=$(jq -re ".[$((i+1))].branch" <<< "${stack}")
      gh pr view "${next}" --json url | jq -re '.url'
    )}

    function get_body() { ( set -euo pipefail
      echo "# Links"
      echo "- prev: $(get_prev_url || echo "(none)")"
      echo "- next: $(get_next_url || echo "(none)")"
      echo -n "# Description"
    )}

    function create_new_pr() { ( set -euo pipefail
      get_body | gh pr create --draft --head "${branch}" --title "${title}" --base "${upstream}" --body-file -
    )}

    function edit_existing_pr() { ( set -euo pipefail
      body_json=$(gh pr view "${branch}" --json body)
      splitter="# Description"
      body=$(jq -re '.body' <<< "${body_json}")
      stuff_to_save=${body#*$splitter}
      full_body=$(
        get_body
        echo "${stuff_to_save}"
      )
      gh pr edit "${branch}" --body "${full_body}" --base "${upstream}"
    )}

    # ensure PR
    if status=$(gh pr view "${branch}" --json state | jq -re '.state'); then
      if [[ "${status}" == "CLOSED" ]]; then
        create_new_pr
      else
        edit_existing_pr
      fi
    else
      create_new_pr
    fi
  done
)}

function show() { ( set -euo pipefail
  local stack_name="${1}"

  stack_folder="${prstack_home}/${stack_name}"
  stack_file="${stack_folder}/stack.jsonnet"

  jsonnet "${stack_file}" | jq
)}
  
function sync() { ( set -euo pipefail
  local stack_name="${1}"
  stack=$(show "${stack_name}")
  ensure_branches "${stack}"
)}

function checkout_top() { ( set -euo pipefail
  local stack_name="${1}"
  branch=$(show "${stack_name}" | jq -re '.[-1].branch')
  git checkout "${branch}"
)}

stack_name="${1}"
cmd="${2}"
shift

case "${cmd}" in

generate)
  generate "${stack_name}"
  ;;

show)
  show "${stack_name}"
  ;;


sync)
  sync "${stack_name}"
  ;;

open)
  open_prs_in_browser "${stack_name}"
  ;;

rebase-all)
  rebase_all "${stack_name}"
  ;;

top)
  checkout_top "${stack_name}"
  ;;

list)
  ls "${prstack_home}"
  ;;

*)
  echo "Unknown command: ${cmd}"
  exit 1
  ;;
esac